// Source code generated by graphql-codegen. DO NOT EDIT!
/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
}

export type BankAccountFundingSource = CommonObject & {
  __typename?: 'BankAccountFundingSource'
  /** The signed authorization providing authority to transact on the bank account. */
  authorization: SignedAuthorizationText
  /** Bank account type */
  bankAccountType: BankAccountType
  /** See CommonObject.createdAtEpochMs */
  createdAtEpochMs: Scalars['Float']
  /** Currency that funding source is denominated in. */
  currency: Scalars['String']
  /** The unique fingerprint of the funding source. */
  fingerprint: Scalars['ID']
  /** See CommonObject.id */
  id: Scalars['ID']
  /** Last 4 digits of user's bank account number. */
  last4: Scalars['String']
  /** See CommonObject.owner */
  owner: Scalars['ID']
  /** State of funding source. */
  state: FundingSourceState
  /** See CommonObject.updatedAtEpochMs */
  updatedAtEpochMs: Scalars['Float']
  /** See CommonObject.version */
  version: Scalars['Int']
}

export enum BankAccountType {
  Checking = 'CHECKING',
  Other = 'OTHER',
  Savings = 'SAVINGS',
}

export enum CardState {
  Closed = 'CLOSED',
  Failed = 'FAILED',
  Issued = 'ISSUED',
  Suspended = 'SUSPENDED',
}

export enum CardType {
  Credit = 'CREDIT',
  Debit = 'DEBIT',
  Other = 'OTHER',
  Prepaid = 'PREPAID',
}

export type CommonObject = {
  /**
   * Time in milliseconds since 1970-01-01T00:00:00Z when object
   * was created
   */
  createdAtEpochMs: Scalars['Float']
  /** ID of the object */
  id: Scalars['ID']
  /** ID of the user which owns the object. */
  owner: Scalars['ID']
  /**
   * Time in milliseconds since 1970-01-01T00:00:00Z when object
   * last updated
   */
  updatedAtEpochMs: Scalars['Float']
  /** Update version of the object */
  version: Scalars['Int']
}

export type CreditCardFundingSource = CommonObject & {
  __typename?: 'CreditCardFundingSource'
  /** Type of card */
  cardType: CardType
  /** See CommonObject.createdAtEpochMs */
  createdAtEpochMs: Scalars['Float']
  /** Currency that funding source is denominated in. */
  currency: Scalars['String']
  /** The unique fingerprint of the funding source. */
  fingerprint: Scalars['ID']
  /** See CommonObject.id */
  id: Scalars['ID']
  /** Last 4 digits of user's credit card */
  last4: Scalars['String']
  /** Card network of card */
  network: CreditCardNetwork
  /** See CommonObject.owner */
  owner: Scalars['ID']
  /** State of funding source. */
  state: FundingSourceState
  /** See CommonObject.updatedAtEpochMs */
  updatedAtEpochMs: Scalars['Float']
  /** See CommonObject.version */
  version: Scalars['Int']
}

export enum CreditCardNetwork {
  Amex = 'AMEX',
  Diners = 'DINERS',
  Discover = 'DISCOVER',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Other = 'OTHER',
  Unionpay = 'UNIONPAY',
  Visa = 'VISA',
}

export type FundingSource = BankAccountFundingSource | CreditCardFundingSource

/**
 * ACTIVE: Funding source is completely set up and in a state suitable
 * for funding virtual card transactions
 *
 * INACTIVE: Funding source is inactive. Is not usable for funding of new transactions
 * but may receive refunds or additional charges on partially complete transactions.
 */
export enum FundingSourceState {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
}

/**
 * Request to generate and retrieve the public token and bank account id required
 * to complete bank account funding source provisioning in a sandbox context.
 *
 * List of supported sandbox institutionId: https://plaid.com/docs/sandbox/institutions/
 */
export type GetPlaidSandboxDataRequest = {
  institutionId: Scalars['String']
}

/** Response containing the public token and bank account metadata to complete bank account funding source provisioning in a sandbox context. */
export type GetPlaidSandboxDataResponse = {
  __typename?: 'GetPlaidSandboxDataResponse'
  /** Metadata of the bank account including ID and subtype. */
  accountMetadata: Array<PlaidAccountMetadata>
  /**
   * The public token that is required to build completion data for creating
   * a bank account funding source.
   */
  publicToken: Scalars['String']
}

/** Request used to retrive for virtual cards activity for a period. */
export type GetVirtualCardsActiveRequest = {
  /**
   * Ending date range of transactions to search.
   *
   * End date is rounded up to the end of the day in which endDate
   * occurs according to timeZone.
   */
  endDate: Scalars['String']
  /**
   * Starting date range of transactions to search.
   *
   * Start date is rounded down to the beginning of the day in which startDate
   * occurs according to timeZone.
   */
  startDate: Scalars['String']
  /**
   * Timezone in which to determine end of a day. Default is UTC.
   * Timezone is named according to POSIX time zone naming e.g. "America/New_York" or
   * "-04:00" or "Z" or "UTC"
   */
  timeZone?: InputMaybe<Scalars['String']>
}

/**
 * Response containing daily totals of active and cancelled virtual
 * cards.
 */
export type GetVirtualCardsActiveResponse = {
  __typename?: 'GetVirtualCardsActiveResponse'
  /**
   * Number of active cards on each day in the range. Array will have n-days elements
   * where n-days is the number of full days represented by startDate and endDate.
   *
   * A card is considered active on a day if it is active for any part of a day.
   */
  activeCards: Array<Scalars['Int']>
  /** ISO8601 representation of rounded end date in time zone specified in request. */
  endDate: Scalars['String']
  /** ISO8601 representation of rounded start date in time zone specified in request. */
  startDate: Scalars['String']
  /** Timezone used in response */
  timeZone: Scalars['String']
}

export type ListFundingSourcesBySubRequest = {
  sub: Scalars['String']
}

export type ListVirtualCardsBySubRequest = {
  sub: Scalars['String']
}

export type ListVirtualCardsBySudoRequest = {
  sudoId: Scalars['String']
}

/** Representation of a markup formula. */
export type Markup = {
  __typename?: 'Markup'
  /**
   * Flat amount applied in calculating total markup in minor
   * currency unit of billed currency in containing transaction detail.
   * e.g. 31 for $0.31
   */
  flat: Scalars['String']
  /**
   * The minimum charge that will be made to the funding source. For example,
   * if a small charge of $0.10 were made with a 2.99%+$0.31 fee formula
   * then the resultant fee would be $0.31 cents resulting in an expected
   * funding source charge of $0.41 cents. If minCharge is set and more than
   * this amount then the minCharge will be charged instead.
   */
  minCharge?: Maybe<Scalars['String']>
  /**
   * Floating point percentage amount applied in calculating
   * total markup multiple by 1000. For example: 2990 for 2.99%.
   * 1/1000th of a percent is the smallest granularity that can be
   * represented.
   */
  percent: Scalars['String']
}

export type Merchant = {
  __typename?: 'Merchant'
  /** City that the merchant charging the virtual card is in. */
  city?: Maybe<Scalars['String']>
  /** Country that the merchant charging the virtual card is in. */
  country: Scalars['String']
  /** ID of the merchant that a transaction was against. */
  id: Scalars['ID']
  /** Merchant Category Code (MCC) that the  merchant belongs to. */
  mcc: Scalars['String']
  /** Postal code that the merchant charging the virtual card is in. */
  postalCode?: Maybe<Scalars['String']>
  /** State that the merchant charging the virtual card is in. */
  state?: Maybe<Scalars['String']>
}

/** Owner Id derived from the owner proof. */
export type Owner = {
  __typename?: 'Owner'
  id: Scalars['String']
  issuer: Scalars['String']
}

export type PlaidAccountMetadata = {
  __typename?: 'PlaidAccountMetadata'
  /** ID of the bank account. */
  accountId: Scalars['String']
  /** Bank account subtype. E.g. checking, saving etc. */
  subtype?: Maybe<Scalars['String']>
}

export type Query = {
  __typename?: 'Query'
  /**
   * Generates and returns the Plaid sandbox public token and account id required to
   * provide information to build the bank account funding source completion data.
   */
  getPlaidSandboxData: GetPlaidSandboxDataResponse
  /** Return number of virtual cards active on a set of days. */
  getVirtualCardsActive: GetVirtualCardsActiveResponse
  listFundingSourcesBySub: Array<FundingSource>
  listVirtualCardsBySub: Array<VirtualCard>
  listVirtualCardsBySudo: Array<VirtualCard>
  searchVirtualCardsTransactions: TransactionResponse
}

export type QueryGetPlaidSandboxDataArgs = {
  input: GetPlaidSandboxDataRequest
}

export type QueryGetVirtualCardsActiveArgs = {
  input: GetVirtualCardsActiveRequest
}

export type QueryListFundingSourcesBySubArgs = {
  input: ListFundingSourcesBySubRequest
}

export type QueryListVirtualCardsBySubArgs = {
  input: ListVirtualCardsBySubRequest
}

export type QueryListVirtualCardsBySudoArgs = {
  input: ListVirtualCardsBySudoRequest
}

export type QuerySearchVirtualCardsTransactionsArgs = {
  input: SearchVirtualCardsTransactionsRequest
}

/** Request used to search for virtual card transactions. */
export type SearchVirtualCardsTransactionsRequest = {
  /** Ending date range of transactions to search. */
  endDate: Scalars['String']
  /** Last 4 digits of card number. */
  last4: Scalars['String']
  /** Max number of transaction records to fetch */
  limit?: InputMaybe<Scalars['Int']>
  /**
   * Token indicating the start of the next batch
   * of records to fetch.
   */
  nextToken?: InputMaybe<Scalars['String']>
  /** Starting date range of transactions to search. */
  startDate: Scalars['String']
  /** ID of the user that owns the transactions. */
  userId: Scalars['ID']
}

export type SignedAuthorizationText = {
  __typename?: 'SignedAuthorizationText'
  /** Algorithm used to generate the signature. */
  algorithm: Scalars['String']
  /** Full content of the agreement */
  content: Scalars['String']
  /** Content type of the agreement. For example text/plain or text/html. */
  contentType: Scalars['String']
  /**
   * Data that is signed. This is a serialised JSON document of the form:
   * {
   *   "hash":"<base64-encoded-hash-of-authorization-agreement-text-agreed-to>",
   *   "hashAlgorithm":"<algorithm-used-to-hash-the-agreement-text>",
   *   "signedAt":"<ISO8601-UTC-timestamp-of-time-signature-generated>",
   *   "account":"<unique-identifier-of-account-agreement-pertains-to>",
   * }
   */
  data: Scalars['String']
  /**
   * ID of public key registered with the virtual cards service corresponding
   * to the private key used to generate the signature
   */
  keyId: Scalars['String']
  /** RFC 5646 language tag specifying the language of the agreement */
  language: Scalars['String']
  /** Base64 encoded signature of the data */
  signature: Scalars['String']
}

export type Transaction = {
  __typename?: 'Transaction'
  /**
   * Amount of this transaction as billed to the card in
   * the card's denominated currency.
   */
  billedAmount: UserCurrencyAmount
  /**
   * Time in milliseconds since 1970-01-01T00:00:00Z when object
   * was created.
   */
  createdAtEpochMs: Scalars['Float']
  /** Decline reason if transaction of type DECLINE. */
  declineReason?: Maybe<Scalars['String']>
  /**
   * List of details about this transaction depending on transaction type.
   * Pending, complete and refund transactions will always have detail.
   * Decline will have detail if an attempt was made to charge the
   * funding source.
   */
  detail?: Maybe<Array<TransactionDetail>>
  /** ID of the object. */
  id: Scalars['ID']
  /** Details excluding the name of the merchant. */
  merchant: Merchant
  /** ID of the user which owns the object. */
  owner: Scalars['ID']
  /**
   * Amount of this transaction as charged by the merchant
   * in the merchant's currency.
   */
  transactedAmount: UserCurrencyAmount
  /** Time at which transaction occurred. */
  transactedAtEpochMs: Scalars['String']
  /** Type of this transaction. */
  type: TransactionType
  /**
   * Time in milliseconds since 1970-01-01T00:00:00Z when object
   * last updated.
   */
  updatedAtEpochMs: Scalars['Float']
}

export type TransactionConnection = {
  __typename?: 'TransactionConnection'
  items: Array<Transaction>
  nextToken?: Maybe<Scalars['String']>
}

/**
 * Transaction detail. Depending on transaction type will detail
 * things like fees, real credit card transaction details etc.
 */
export type TransactionDetail = {
  __typename?: 'TransactionDetail'
  /** Amount charged or refunded to the funding source. */
  fundingSourceAmount: UserCurrencyAmount
  /** ID of funding source that funded this item. */
  fundingSourceId: Scalars['ID']
  /** Last 4 digits of a user's credit card. */
  fundingSourceLast4: Scalars['String']
  /** Card network of a funding source. */
  fundingSourceNetwork: CreditCardNetwork
  /** Markup formula applied to billedAmount. */
  markup: Markup
  /** Amount of the service fee applied to the transacted amount. */
  serviceFee: UserCurrencyAmount
  /** Amount merchant charged virtual card. */
  virtualCardAmount: UserCurrencyAmount
}

export type TransactionResponse = {
  __typename?: 'TransactionResponse'
  /**
   * State of virtual card which define issued, failed
   * and closed states of virtual cards.
   */
  cardState: CardState
  /** ID of card data is returned for */
  id: Scalars['ID']
  /** Last 4 digits of card number. */
  last4: Scalars['String']
  /** List of paginated transactions. */
  transactions: TransactionConnection
}

export enum TransactionType {
  Chargeback = 'CHARGEBACK',
  Complete = 'COMPLETE',
  Decline = 'DECLINE',
  Pending = 'PENDING',
  Refund = 'REFUND',
  Reversal = 'REVERSAL',
}

export type UserCurrencyAmount = {
  __typename?: 'UserCurrencyAmount'
  /** Amount of currency amount in currency's decimal unit. */
  amount: Scalars['Float']
  /** Currency of currency amount. */
  currency: Scalars['String']
}

/** Admin representation of a virtual card. */
export type VirtualCard = CommonObject & {
  __typename?: 'VirtualCard'
  /** Time since epoch in which the virtual card will no longer be valid in system. */
  activeToEpochMs: Scalars['Float']
  /**
   * Public key encryption algorithm specifier. See Sudo Platform documentation
   * for set of allowed values.
   */
  algorithm: Scalars['String']
  /** Time since epoch in which the card was cancelled. */
  cancelledAtEpochMs?: Maybe<Scalars['Float']>
  /**
   * Time in milliseconds since 1970-01-01T00:00:00Z when object
   * was created
   */
  createdAtEpochMs: Scalars['Float']
  /** A representation of the currency of the virtual card (i.e. USD, CAD, AUD). */
  currency: Scalars['String']
  /**
   * ID of funding source that will be used to fund activity on
   * the card.
   */
  fundingSourceId: Scalars['ID']
  /** ID of the object */
  id: Scalars['ID']
  /** Client generated key ID for the public key. */
  keyId: Scalars['String']
  /**
   * Client generated key ring ID for the public key ring used
   * for sealing this card and transactions information for this
   * card.
   */
  keyRingId: Scalars['ID']
  /** Last 4 digits of card number. */
  last4: Scalars['String']
  /** ID of the user which owns the object. */
  owner: Scalars['ID']
  /**
   * Array of owner Ids that are extracted from the owner proofs
   * to tie a virtual card to a Sudo.
   */
  owners: Array<Owner>
  /** State of virtual card which define incomplete, provisioning and expiry processing of virtual cards. */
  state: CardState
  /**
   * Time in milliseconds since 1970-01-01T00:00:00Z when object
   * last updated
   */
  updatedAtEpochMs: Scalars['Float']
  /** Update version of the object */
  version: Scalars['Int']
}

type AdminFundingSource_BankAccountFundingSource_Fragment = {
  __typename?: 'BankAccountFundingSource'
  id: string
  owner: string
  version: number
  createdAtEpochMs: number
  updatedAtEpochMs: number
  state: FundingSourceState
  currency: string
  fingerprint: string
  last4: string
  bankAccountType: BankAccountType
  authorization: {
    __typename?: 'SignedAuthorizationText'
    content: string
    contentType: string
    language: string
    data: string
    signature: string
    algorithm: string
    keyId: string
  }
}

type AdminFundingSource_CreditCardFundingSource_Fragment = {
  __typename?: 'CreditCardFundingSource'
  id: string
  owner: string
  version: number
  createdAtEpochMs: number
  updatedAtEpochMs: number
  state: FundingSourceState
  currency: string
  fingerprint: string
  last4: string
  cardType: CardType
  network: CreditCardNetwork
}

export type AdminFundingSourceFragment =
  | AdminFundingSource_BankAccountFundingSource_Fragment
  | AdminFundingSource_CreditCardFundingSource_Fragment

export type MarkupFragment = {
  __typename?: 'Markup'
  percent: string
  flat: string
  minCharge?: string | null
}

export type MerchantFragment = {
  __typename?: 'Merchant'
  id: string
  mcc: string
  country: string
  city?: string | null
  state?: string | null
  postalCode?: string | null
}

export type TransactionFragment = {
  __typename?: 'Transaction'
  id: string
  owner: string
  createdAtEpochMs: number
  updatedAtEpochMs: number
  type: TransactionType
  transactedAtEpochMs: string
  declineReason?: string | null
  billedAmount: {
    __typename?: 'UserCurrencyAmount'
    currency: string
    amount: number
  }
  transactedAmount: {
    __typename?: 'UserCurrencyAmount'
    currency: string
    amount: number
  }
  merchant: {
    __typename?: 'Merchant'
    id: string
    mcc: string
    country: string
    city?: string | null
    state?: string | null
    postalCode?: string | null
  }
  detail?: Array<{
    __typename?: 'TransactionDetail'
    fundingSourceId: string
    fundingSourceLast4: string
    fundingSourceNetwork: CreditCardNetwork
    virtualCardAmount: {
      __typename?: 'UserCurrencyAmount'
      currency: string
      amount: number
    }
    markup: {
      __typename?: 'Markup'
      percent: string
      flat: string
      minCharge?: string | null
    }
    serviceFee: {
      __typename?: 'UserCurrencyAmount'
      currency: string
      amount: number
    }
    fundingSourceAmount: {
      __typename?: 'UserCurrencyAmount'
      currency: string
      amount: number
    }
  }> | null
}

export type TransactionDetailFragment = {
  __typename?: 'TransactionDetail'
  fundingSourceId: string
  fundingSourceLast4: string
  fundingSourceNetwork: CreditCardNetwork
  virtualCardAmount: {
    __typename?: 'UserCurrencyAmount'
    currency: string
    amount: number
  }
  markup: {
    __typename?: 'Markup'
    percent: string
    flat: string
    minCharge?: string | null
  }
  serviceFee: {
    __typename?: 'UserCurrencyAmount'
    currency: string
    amount: number
  }
  fundingSourceAmount: {
    __typename?: 'UserCurrencyAmount'
    currency: string
    amount: number
  }
}

export type UserCurrencyAmountFragment = {
  __typename?: 'UserCurrencyAmount'
  currency: string
  amount: number
}

export type VirtualCardWithoutSealedAttributesFragment = {
  __typename?: 'VirtualCard'
  id: string
  owner: string
  version: number
  createdAtEpochMs: number
  updatedAtEpochMs: number
  algorithm: string
  keyId: string
  keyRingId: string
  fundingSourceId: string
  currency: string
  state: CardState
  activeToEpochMs: number
  cancelledAtEpochMs?: number | null
  last4: string
  owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
}

export type GetPlaidSandboxDataQueryVariables = Exact<{
  input: GetPlaidSandboxDataRequest
}>

export type GetPlaidSandboxDataQuery = {
  __typename?: 'Query'
  getPlaidSandboxData: {
    __typename?: 'GetPlaidSandboxDataResponse'
    publicToken: string
    accountMetadata: Array<{
      __typename?: 'PlaidAccountMetadata'
      accountId: string
      subtype?: string | null
    }>
  }
}

export type GetVirtualCardsActiveQueryVariables = Exact<{
  input: GetVirtualCardsActiveRequest
}>

export type GetVirtualCardsActiveQuery = {
  __typename?: 'Query'
  getVirtualCardsActive: {
    __typename?: 'GetVirtualCardsActiveResponse'
    startDate: string
    endDate: string
    timeZone: string
    activeCards: Array<number>
  }
}

export type ListFundingSourcesBySubQueryVariables = Exact<{
  input: ListFundingSourcesBySubRequest
}>

export type ListFundingSourcesBySubQuery = {
  __typename?: 'Query'
  listFundingSourcesBySub: Array<
    | {
        __typename?: 'BankAccountFundingSource'
        id: string
        owner: string
        version: number
        createdAtEpochMs: number
        updatedAtEpochMs: number
        state: FundingSourceState
        currency: string
        fingerprint: string
        last4: string
        bankAccountType: BankAccountType
        authorization: {
          __typename?: 'SignedAuthorizationText'
          content: string
          contentType: string
          language: string
          data: string
          signature: string
          algorithm: string
          keyId: string
        }
      }
    | {
        __typename?: 'CreditCardFundingSource'
        id: string
        owner: string
        version: number
        createdAtEpochMs: number
        updatedAtEpochMs: number
        state: FundingSourceState
        currency: string
        fingerprint: string
        last4: string
        cardType: CardType
        network: CreditCardNetwork
      }
  >
}

export type ListVirtualCardsBySubQueryVariables = Exact<{
  input: ListVirtualCardsBySubRequest
}>

export type ListVirtualCardsBySubQuery = {
  __typename?: 'Query'
  listVirtualCardsBySub: Array<{
    __typename?: 'VirtualCard'
    id: string
    owner: string
    version: number
    createdAtEpochMs: number
    updatedAtEpochMs: number
    algorithm: string
    keyId: string
    keyRingId: string
    fundingSourceId: string
    currency: string
    state: CardState
    activeToEpochMs: number
    cancelledAtEpochMs?: number | null
    last4: string
    owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
  }>
}

export type ListVirtualCardsBySudoQueryVariables = Exact<{
  input: ListVirtualCardsBySudoRequest
}>

export type ListVirtualCardsBySudoQuery = {
  __typename?: 'Query'
  listVirtualCardsBySudo: Array<{
    __typename?: 'VirtualCard'
    id: string
    owner: string
    version: number
    createdAtEpochMs: number
    updatedAtEpochMs: number
    algorithm: string
    keyId: string
    keyRingId: string
    fundingSourceId: string
    currency: string
    state: CardState
    activeToEpochMs: number
    cancelledAtEpochMs?: number | null
    last4: string
    owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
  }>
}

export type SearchVirtualCardsTransactionsQueryVariables = Exact<{
  input: SearchVirtualCardsTransactionsRequest
}>

export type SearchVirtualCardsTransactionsQuery = {
  __typename?: 'Query'
  searchVirtualCardsTransactions: {
    __typename?: 'TransactionResponse'
    id: string
    cardState: CardState
    last4: string
    transactions: {
      __typename?: 'TransactionConnection'
      nextToken?: string | null
      items: Array<{
        __typename?: 'Transaction'
        id: string
        owner: string
        createdAtEpochMs: number
        updatedAtEpochMs: number
        type: TransactionType
        transactedAtEpochMs: string
        declineReason?: string | null
        billedAmount: {
          __typename?: 'UserCurrencyAmount'
          currency: string
          amount: number
        }
        transactedAmount: {
          __typename?: 'UserCurrencyAmount'
          currency: string
          amount: number
        }
        merchant: {
          __typename?: 'Merchant'
          id: string
          mcc: string
          country: string
          city?: string | null
          state?: string | null
          postalCode?: string | null
        }
        detail?: Array<{
          __typename?: 'TransactionDetail'
          fundingSourceId: string
          fundingSourceLast4: string
          fundingSourceNetwork: CreditCardNetwork
          virtualCardAmount: {
            __typename?: 'UserCurrencyAmount'
            currency: string
            amount: number
          }
          markup: {
            __typename?: 'Markup'
            percent: string
            flat: string
            minCharge?: string | null
          }
          serviceFee: {
            __typename?: 'UserCurrencyAmount'
            currency: string
            amount: number
          }
          fundingSourceAmount: {
            __typename?: 'UserCurrencyAmount'
            currency: string
            amount: number
          }
        }> | null
      }>
    }
  }
}

export const AdminFundingSourceFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AdminFundingSource' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'FundingSource' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'InlineFragment',
            typeCondition: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreditCardFundingSource' },
            },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
                { kind: 'Field', name: { kind: 'Name', value: 'version' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdAtEpochMs' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'updatedAtEpochMs' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'state' } },
                { kind: 'Field', name: { kind: 'Name', value: 'currency' } },
                { kind: 'Field', name: { kind: 'Name', value: 'fingerprint' } },
                { kind: 'Field', name: { kind: 'Name', value: 'last4' } },
                { kind: 'Field', name: { kind: 'Name', value: 'cardType' } },
                { kind: 'Field', name: { kind: 'Name', value: 'network' } },
              ],
            },
          },
          {
            kind: 'InlineFragment',
            typeCondition: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'BankAccountFundingSource' },
            },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
                { kind: 'Field', name: { kind: 'Name', value: 'version' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdAtEpochMs' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'updatedAtEpochMs' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'state' } },
                { kind: 'Field', name: { kind: 'Name', value: 'currency' } },
                { kind: 'Field', name: { kind: 'Name', value: 'fingerprint' } },
                { kind: 'Field', name: { kind: 'Name', value: 'last4' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'bankAccountType' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'authorization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'content' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'contentType' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'language' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'signature' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'algorithm' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AdminFundingSourceFragment, unknown>
export const UserCurrencyAmountFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'UserCurrencyAmount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'UserCurrencyAmount' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'currency' } },
          { kind: 'Field', name: { kind: 'Name', value: 'amount' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserCurrencyAmountFragment, unknown>
export const MerchantFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Merchant' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Merchant' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'mcc' } },
          { kind: 'Field', name: { kind: 'Name', value: 'country' } },
          { kind: 'Field', name: { kind: 'Name', value: 'city' } },
          { kind: 'Field', name: { kind: 'Name', value: 'state' } },
          { kind: 'Field', name: { kind: 'Name', value: 'postalCode' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<MerchantFragment, unknown>
export const MarkupFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Markup' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Markup' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'percent' } },
          { kind: 'Field', name: { kind: 'Name', value: 'flat' } },
          { kind: 'Field', name: { kind: 'Name', value: 'minCharge' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<MarkupFragment, unknown>
export const TransactionDetailFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TransactionDetail' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'TransactionDetail' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'virtualCardAmount' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserCurrencyAmount' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'markup' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'Markup' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'serviceFee' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserCurrencyAmount' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'fundingSourceId' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'fundingSourceAmount' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserCurrencyAmount' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'fundingSourceLast4' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'fundingSourceNetwork' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'UserCurrencyAmount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'UserCurrencyAmount' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'currency' } },
          { kind: 'Field', name: { kind: 'Name', value: 'amount' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Markup' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Markup' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'percent' } },
          { kind: 'Field', name: { kind: 'Name', value: 'flat' } },
          { kind: 'Field', name: { kind: 'Name', value: 'minCharge' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TransactionDetailFragment, unknown>
export const TransactionFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Transaction' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Transaction' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'transactedAtEpochMs' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'billedAmount' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserCurrencyAmount' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'transactedAmount' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserCurrencyAmount' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'merchant' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'Merchant' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'declineReason' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'detail' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TransactionDetail' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'UserCurrencyAmount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'UserCurrencyAmount' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'currency' } },
          { kind: 'Field', name: { kind: 'Name', value: 'amount' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Markup' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Markup' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'percent' } },
          { kind: 'Field', name: { kind: 'Name', value: 'flat' } },
          { kind: 'Field', name: { kind: 'Name', value: 'minCharge' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Merchant' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Merchant' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'mcc' } },
          { kind: 'Field', name: { kind: 'Name', value: 'country' } },
          { kind: 'Field', name: { kind: 'Name', value: 'city' } },
          { kind: 'Field', name: { kind: 'Name', value: 'state' } },
          { kind: 'Field', name: { kind: 'Name', value: 'postalCode' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TransactionDetail' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'TransactionDetail' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'virtualCardAmount' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserCurrencyAmount' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'markup' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'Markup' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'serviceFee' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserCurrencyAmount' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'fundingSourceId' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'fundingSourceAmount' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserCurrencyAmount' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'fundingSourceLast4' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'fundingSourceNetwork' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TransactionFragment, unknown>
export const VirtualCardWithoutSealedAttributesFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VirtualCardWithoutSealedAttributes' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'VirtualCard' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'fundingSourceId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'currency' } },
          { kind: 'Field', name: { kind: 'Name', value: 'state' } },
          { kind: 'Field', name: { kind: 'Name', value: 'activeToEpochMs' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'cancelledAtEpochMs' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'last4' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  VirtualCardWithoutSealedAttributesFragment,
  unknown
>
export const GetPlaidSandboxDataDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetPlaidSandboxData' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'GetPlaidSandboxDataRequest' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getPlaidSandboxData' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'accountMetadata' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'accountId' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subtype' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'publicToken' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  GetPlaidSandboxDataQuery,
  GetPlaidSandboxDataQueryVariables
>
export const GetVirtualCardsActiveDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetVirtualCardsActive' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'GetVirtualCardsActiveRequest' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getVirtualCardsActive' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'startDate' } },
                { kind: 'Field', name: { kind: 'Name', value: 'endDate' } },
                { kind: 'Field', name: { kind: 'Name', value: 'timeZone' } },
                { kind: 'Field', name: { kind: 'Name', value: 'activeCards' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  GetVirtualCardsActiveQuery,
  GetVirtualCardsActiveQueryVariables
>
export const ListFundingSourcesBySubDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'listFundingSourcesBySub' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'ListFundingSourcesBySubRequest' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'listFundingSourcesBySub' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AdminFundingSource' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AdminFundingSource' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'FundingSource' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'InlineFragment',
            typeCondition: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreditCardFundingSource' },
            },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
                { kind: 'Field', name: { kind: 'Name', value: 'version' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdAtEpochMs' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'updatedAtEpochMs' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'state' } },
                { kind: 'Field', name: { kind: 'Name', value: 'currency' } },
                { kind: 'Field', name: { kind: 'Name', value: 'fingerprint' } },
                { kind: 'Field', name: { kind: 'Name', value: 'last4' } },
                { kind: 'Field', name: { kind: 'Name', value: 'cardType' } },
                { kind: 'Field', name: { kind: 'Name', value: 'network' } },
              ],
            },
          },
          {
            kind: 'InlineFragment',
            typeCondition: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'BankAccountFundingSource' },
            },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
                { kind: 'Field', name: { kind: 'Name', value: 'version' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdAtEpochMs' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'updatedAtEpochMs' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'state' } },
                { kind: 'Field', name: { kind: 'Name', value: 'currency' } },
                { kind: 'Field', name: { kind: 'Name', value: 'fingerprint' } },
                { kind: 'Field', name: { kind: 'Name', value: 'last4' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'bankAccountType' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'authorization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'content' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'contentType' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'language' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'signature' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'algorithm' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  ListFundingSourcesBySubQuery,
  ListFundingSourcesBySubQueryVariables
>
export const ListVirtualCardsBySubDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'listVirtualCardsBySub' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'ListVirtualCardsBySubRequest' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'listVirtualCardsBySub' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: {
                    kind: 'Name',
                    value: 'VirtualCardWithoutSealedAttributes',
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VirtualCardWithoutSealedAttributes' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'VirtualCard' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'fundingSourceId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'currency' } },
          { kind: 'Field', name: { kind: 'Name', value: 'state' } },
          { kind: 'Field', name: { kind: 'Name', value: 'activeToEpochMs' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'cancelledAtEpochMs' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'last4' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  ListVirtualCardsBySubQuery,
  ListVirtualCardsBySubQueryVariables
>
export const ListVirtualCardsBySudoDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'listVirtualCardsBySudo' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'ListVirtualCardsBySudoRequest' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'listVirtualCardsBySudo' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: {
                    kind: 'Name',
                    value: 'VirtualCardWithoutSealedAttributes',
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VirtualCardWithoutSealedAttributes' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'VirtualCard' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'fundingSourceId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'currency' } },
          { kind: 'Field', name: { kind: 'Name', value: 'state' } },
          { kind: 'Field', name: { kind: 'Name', value: 'activeToEpochMs' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'cancelledAtEpochMs' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'last4' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  ListVirtualCardsBySudoQuery,
  ListVirtualCardsBySudoQueryVariables
>
export const SearchVirtualCardsTransactionsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'SearchVirtualCardsTransactions' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: {
                kind: 'Name',
                value: 'SearchVirtualCardsTransactionsRequest',
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'searchVirtualCardsTransactions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'cardState' } },
                { kind: 'Field', name: { kind: 'Name', value: 'last4' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'transactions' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'items' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'Transaction' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'nextToken' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'UserCurrencyAmount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'UserCurrencyAmount' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'currency' } },
          { kind: 'Field', name: { kind: 'Name', value: 'amount' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Merchant' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Merchant' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'mcc' } },
          { kind: 'Field', name: { kind: 'Name', value: 'country' } },
          { kind: 'Field', name: { kind: 'Name', value: 'city' } },
          { kind: 'Field', name: { kind: 'Name', value: 'state' } },
          { kind: 'Field', name: { kind: 'Name', value: 'postalCode' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Markup' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Markup' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'percent' } },
          { kind: 'Field', name: { kind: 'Name', value: 'flat' } },
          { kind: 'Field', name: { kind: 'Name', value: 'minCharge' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TransactionDetail' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'TransactionDetail' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'virtualCardAmount' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserCurrencyAmount' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'markup' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'Markup' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'serviceFee' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserCurrencyAmount' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'fundingSourceId' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'fundingSourceAmount' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserCurrencyAmount' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'fundingSourceLast4' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'fundingSourceNetwork' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Transaction' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Transaction' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'transactedAtEpochMs' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'billedAmount' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserCurrencyAmount' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'transactedAmount' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserCurrencyAmount' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'merchant' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'Merchant' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'declineReason' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'detail' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TransactionDetail' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  SearchVirtualCardsTransactionsQuery,
  SearchVirtualCardsTransactionsQueryVariables
>
